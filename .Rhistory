rounded_max_lng = round(max_lng, 2)
) %>%
ungroup()
#Adding tolerance
tolerance <- 0.002
#Creating function
generate_condition <- function(data,
station_name_column,
station_id_column,
lat_column,
lng_column,
round_lat_column,
round_lng_column,
station_info) {
condition <- data[[station_name_column]] == "" & data[[station_id_column]] == "" &
(
data[[lat_column]] >= station_info$min_lat - tolerance &
data[[lat_column]] <= station_info$max_lat + tolerance &
data[[lng_column]] >= station_info$min_lng - tolerance &
data[[lng_column]] <= station_info$max_lng + tolerance
) |
(
data[[round_lat_column]] >= station_info$rounded_min_lat &
data[[round_lat_column]] <= station_info$rounded_max_lat &
data[[round_lng_column]] >= station_info$rounded_min_lng &
data[[round_lng_column]] <= station_info$rounded_max_lng
)
return(condition)
}
#Generate conditions for Start stations using Start station info
condition_start <- generate_condition(
bike_data_2023,
"start_station_name",
"start_station_id",
"start_lat",
"start_lng",
"start_lat_round",
"start_lng_round",
start_station_info
)
#Generate conditions for End stations using End station info
condition_end <- generate_condition(
bike_data_2023,
"end_station_name",
"end_station_id",
"end_lat",
"end_lng",
"end_lat_round",
"end_lat_round",
end_station_info
)
#Generate conditions for Start stations using End Station info
condition_start_from_end <- generate_condition(
bike_data_2023,
"start_station_name",
"start_station_id",
"start_lat",
"start_lng",
"start_lat_round",
"start_lng_round",
end_station_info
)
#Generate conditions for End Stations using start Station info
condition_end_from_start <- generate_condition(
bike_data_2023,
"end_station_name",
"end_station_id",
"end_lat",
"end_lng",
"end_lat_round",
"end_lat_round",
start_station_info
)
#Updating bike_data_2023 Start Stations & End Stations
bike_data_2023_2 <- bike_data_2023 %>%
mutate(
start_station_name = ifelse(condition_start, start_station_info$station_name, start_station_name),
start_station_id = ifelse(condition_start, start_station_info$station_id, start_station_id),
end_station_name = ifelse(condition_end, end_station_info$station_name, end_station_name),
end_station_id = ifelse(condition_end, end_station_info$station_id, end_station_id),
start_station_name = ifelse(condition_start_from_end, end_station_info$station_name, start_station_name),
start_station_id = ifelse(condition_start_from_end, end_station_info$station_id, start_station_id),
end_station_name = ifelse(condition_end_from_start, start_station_info$station_name, end_station_name),
end_station_id = ifelse(condition_end_from_start, start_station_info$station_id, end_station_id)
)
#Comparing to unaltered Start stations
#bike_data_2023 %>%
#filter(start_station_name == "" & start_station_id == "")
#bike_data_2023_2 %>%
#filter(start_station_name == "" & start_station_id == "")
#Comparing to unaltered End stations
#bike_data_2023 %>%
#filter(end_station_name == "" & end_station_id == "")
#bike_data_2023_2 %>%
#filter(end_station_name == "" & end_station_id == "")
bike_data_2023 <- bike_data_2023_2
#Start Stations
check_start_station <- bike_data_2023 %>%
distinct(station_name = start_station_name, station_id = start_station_id)
#print(check_start_station)
#Bike service stops Start stations
check_test_start_station <- bike_data_2023 %>%
filter(
grepl("test", start_station_id, ignore.case = TRUE) |
grepl("test", start_station_name, ignore.case = TRUE) |
grepl("warehouse", start_station_id, ignore.case = TRUE) |
grepl("warehouse", start_station_name, ignore.case = TRUE) |
grepl("divvy", start_station_id, ignore.case = TRUE) |
grepl("divvy", start_station_name, ignore.case = TRUE) |
grepl("charging", start_station_id, ignore.case = TRUE) |
grepl("charging", start_station_name, ignore.case = TRUE)
) %>%
count(start_station_name, start_station_id)
#print(check_test_start_station)
#End Stations
check_end_station <- bike_data_2023 %>%
distinct(station_name = end_station_name, station_id = end_station_id)
#print(check_end_station)
#Bike service stops End stations
check_test_end_station <- bike_data_2023 %>%
filter(
grepl("test", end_station_id, ignore.case = TRUE) |
grepl("test", end_station_name, ignore.case = TRUE) |
grepl("warehouse", end_station_id, ignore.case = TRUE) |
grepl("warehouse", end_station_name, ignore.case = TRUE) |
grepl("divvy", end_station_id, ignore.case = TRUE) |
grepl("divvy", end_station_name, ignore.case = TRUE) |
grepl("charging", end_station_id, ignore.case = TRUE) |
grepl("charging", end_station_name, ignore.case = TRUE)
) %>%
count(end_station_name, end_station_id)
#print(check_test_end_station)
#Deleting rides that started from service station
bike_data_2023 <- subset(bike_data_2023, !(start_station_name %in% check_test_start_station$start_station_name))
#Deleting rides that ended at service station
bike_data_2023 <- subset(bike_data_2023, !(end_station_name %in% check_test_end_station$end_station_name))
bike_data_2023_2 <- subset(bike_data_2023_2, !(is.na(end_lat) & is.na(end_lng) & end_station_name == "" & end_station_id == ""))
bike_data_2023 <- subset(bike_data_2023, ride_length >= 60 & ride_length <= 86400)
#Average ride length by month, weekday, and customer type
bike_avg_ride_length <- bike_data_2023 %>%
group_by(month, day_of_week, member_casual) %>%
summarize(avg_ride_length = round(mean(ride_length)), .groups = "drop")
print(bike_avg_ride_length)
#Average ride length by month and customer type
bike_avg_ride_length_month <- bike_data_2023 %>%
group_by(month, member_casual) %>%
summarize(avg_ride_length_month = round(mean(ride_length)), .groups = "drop")
#Converting seconds to MM:SS for chart
bike_avg_ride_length_month$ride_length_min_sec <- sprintf("%02d:%02d",
bike_avg_ride_length_month$avg_ride_length_month %/% 60,
bike_avg_ride_length_month$avg_ride_length_month %% 60)
print(bike_avg_ride_length_month)
#Average ride length by weekday and customer type
bike_avg_ride_length_week <- bike_data_2023 %>%
group_by(day_of_week, member_casual) %>%
summarize(avg_ride_length_week = round(mean(ride_length)), .groups = "drop")
#print(bike_avg_ride_length_week)
#Average ride length by customer type
bike_avg_ride_length_member_type <- bike_data_2023 %>%
group_by(member_casual) %>%
summarize(avg_ride_length_member_type = round(mean(ride_length)))
bike_avg_ride_length_member_type$ride_length_min_sec <- sprintf("%02d:%02d",
bike_avg_ride_length_member_type$avg_ride_length_member_type %/% 60,
bike_avg_ride_length_member_type$avg_ride_length_member_type %% 60)
print(bike_avg_ride_length_member_type)
#Calculate the increase in average ride length by customer type
bike_avg_ride_length_month_increase <- bike_avg_ride_length_month %>%
arrange(month) %>%
group_by(member_casual) %>%
mutate(avg_ride_length_previous_month = lag(avg_ride_length_month),
increase_vs_previous_month = avg_ride_length_month - avg_ride_length_previous_month) %>%
ungroup()
print(bike_avg_ride_length_month_increase)
sorted_bike_avg_ride_length <- bike_avg_ride_length %>%
arrange(member_casual, desc(avg_ride_length))
#Days with longest average ride length
max_avg <- sorted_bike_avg_ride_length %>%
group_by(member_casual) %>%
slice_max(order_by = avg_ride_length)
#Days with shortest average ride length
min_avg <- sorted_bike_avg_ride_length %>%
group_by(member_casual) %>%
slice_min(order_by = avg_ride_length)
max_avg$avg_ride_length_hms <- as_hms(max_avg$avg_ride_length)
min_avg$avg_ride_length_hms <- as_hms(min_avg$avg_ride_length)
print(max_avg)
print(min_avg)
print(sorted_bike_avg_ride_length)
#Ride count by month, weekday, and customer type
bike_ride_count <- bike_data_2023 %>%
group_by(month, day_of_week, member_casual) %>%
summarize(ride_count = n(), .groups = "drop")
print(bike_ride_count)
#Ride count by month and customer type
bike_ride_count_month <- bike_data_2023 %>%
group_by(month, member_casual) %>%
summarize(ride_count_month = n())
print(bike_ride_count_month)
#Months by ride count and customer type from high to low
ordered_ride_count_month <- bike_ride_count_month %>%
arrange(member_casual, desc(ride_count_month))
print(ordered_ride_count_month)
#Member
ordered_ride_count_month_member <- ordered_ride_count_month %>%
filter(member_casual == "member")
print(ordered_ride_count_month_member)
#Casual
ordered_ride_count_month_casual <- ordered_ride_count_month %>%
filter(member_casual == "casual")
print(ordered_ride_count_month_casual)
#Ride count by weekday and customer type
bike_ride_count_week <- bike_data_2023 %>%
group_by(day_of_week, member_casual) %>%
summarize(ride_count_week = n(), .groups = "drop")
print(bike_ride_count_week)
##Ride count by hour, weekday and customer type
rides_by_hour <- bike_data_2023 %>%
group_by(member_casual, workday_weekend, start_hour) %>%
summarise(ride_count = n(), .groups = "drop")
print(bike_ride_count_week)
#Filtering out workdays
rides_by_hour_workdays_casual <- filter(rides_by_hour, workday_weekend == "Workday", member_casual == "casual")
rides_by_hour_workdays_member <- filter(rides_by_hour, workday_weekend == "Workday", member_casual == "member")
print(rides_by_hour_workdays_casual)
print(rides_by_hour_workdays_member)
#Filtering out weekends
rides_by_hour_weekends_casual <- filter(rides_by_hour, workday_weekend == "Weekend", member_casual == "casual")
rides_by_hour_weekends_member <- filter(rides_by_hour, workday_weekend == "Weekend", member_casual == "member")
print(rides_by_hour_weekends_casual)
print(rides_by_hour_weekends_member)
#Ride count by customer type
bike_ride_count_member_type <- bike_data_2023 %>%
group_by(member_casual) %>%
summarize(ride_count_member_type = n()) %>% #For pie chart
ungroup() %>%
mutate(percentages_ride_count_member_type = round(ride_count_member_type / sum(ride_count_member_type), 2)) %>%
arrange(percentages_ride_count_member_type) %>%
mutate(labels_ride_count_member_type_perc = scales::percent(percentages_ride_count_member_type))
print(bike_ride_count_member_type)
#Distribution of rideable types by customer type
rideable_summary <- bike_data_2023 %>%
group_by(member_casual, rideable_type) %>%
summarize(rides_count = n(), .groups = "drop") %>%
mutate(percentages_rideable_type = round(rides_count / sum(rides_count), 2)) %>%
arrange(percentages_rideable_type) %>%
mutate(labels_rideable_type_perc = scales::percent(percentages_rideable_type))
rideable_summary$lab_name <- paste(rideable_summary$member_casual, rideable_summary$rideable_type)
print(rideable_summary)
mode_day_of_week <- bike_data_2023 %>%
group_by(day_of_week) %>%
summarise(freq = n()) %>%
filter(freq == max(freq)) %>%
pull(day_of_week)
print(mode_day_of_week)
#Median ride length for casual customers
median_ride_length_casual <- median(bike_data_2023$ride_length[bike_data_2023$member_casual == "casual"])
#Median ride length for member customers
median_ride_length_member <- median(bike_data_2023$ride_length[bike_data_2023$member_casual == "member"])
print(paste("Median ride length for casual customers:", median_ride_length_casual, "seconds."))
print(paste("Median ride length for member customers:", median_ride_length_member, "seconds."))
print(paste("Median ride length for casual customers:", (floor(median_ride_length_casual/60)), "minutes and ", (median_ride_length_casual - (floor(median_ride_length_casual/60)*60)), "seconds."))
print(paste("Median ride length for member customers:", (floor(median_ride_length_member/60)), "minutes and ", (median_ride_length_member - (floor(median_ride_length_member/60)*60)), "seconds."))
#Top 15 most popular stations by ride count
station_top <- bike_data_2023 %>%
filter(start_station_name != "" & start_station_id != "") %>%
group_by(start_station_name, start_station_id) %>%
summarize(ride_count = n(), .groups = "drop") %>%
arrange(desc(ride_count)) %>%
top_n(15)
print(station_top)
#Variables
y_breaks <- seq(0, 1800, by = 300)
y_labels <-c ("0", "5 min", "10 min", "15 min", "20 min", "25 min", "30 min")
#Creating facet-plots to visualize data for each month
#Average ride length by month, weekday, and customer type
plot_1_01 <- ggplot(bike_avg_ride_length, aes(x = day_of_week, y = avg_ride_length, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Week day", y = "Average ride length", fill = "Customer type", title = "Average ride length by month, weekday, and customer type") +
facet_wrap(~month, scales = "fixed") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_1_01)
ggsave("plot-1-01.png", plot = plot_1_01, width = 10, height = 6)
#Adding two horisontal lines to plot to increace readability
plot_1_02 <- ggplot(bike_avg_ride_length, aes(x = day_of_week, y = avg_ride_length, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Week day", y = "Average ride length", fill = "Customer type", title = "Average ride length by month, weekday, and customer type") +
facet_wrap(~month, scales = "fixed") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(yintercept = 600, color = "black", linetype = "solid", linewidth = 0.5) +
geom_hline(yintercept = 750, color = "black", linetype = "solid", linewidth = 0.5)
print(plot_1_02)
ggsave("plot-1-02.png", plot = plot_1_02, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 1800, by = 300)
y_labels <-c ("0", "5 min", "10 min", "15 min", "20 min", "25 min", "30 min")
#Average ride length by month and customer type
plot_1_03 <- ggplot(bike_avg_ride_length_month, aes(x = month, y = avg_ride_length_month, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
geom_text(aes(label = ride_length_min_sec), vjust = -0.5) +
labs(x = "Month", y = "Average ride length", title = "Average ride length by month and customer type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_1_03)
ggsave("plot-1-03.png", plot = plot_1_03, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 1800, by = 300)
y_labels <-c ("0", "5 min", "10 min", "15 min", "20 min", "25 min", "30 min")
plot_1_04 <- ggplot(bike_avg_ride_length_week, aes(x = day_of_week, y = avg_ride_length_week, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Week day", y = "Average ride length", title = "Average ride length by weekday and customer type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_1_04)
ggsave("plot-1-04.png", plot = plot_1_04, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 1800, by = 300)
y_labels <-c ("0", "5 min", "10 min", "15 min", "20 min", "25 min", "30 min")
#Average ride length by customer type
plot_1_05 <- ggplot(bike_avg_ride_length_member_type, aes(x = member_casual, y = avg_ride_length_member_type, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = ride_length_min_sec), vjust = -0.5) +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Customer type", y = "Average ride length", title = "Average ride length by customer type") +
theme_minimal()
print(plot_1_05)
ggsave("plot-1-05.png", plot = plot_1_05, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 80000, by = 10000)
y_labels <-c ("0", "10 000", "20 000", "30 000", "40 000", "50 000", "60 000", "70 000", "80 000")
#Ride count by month, weekday, and customer type
plot_2_06 <- ggplot(bike_ride_count, aes(x = day_of_week, y = ride_count, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Week day", y = "Ride count", title = "Ride count by month, weekday, and customer type") +
facet_wrap(~month, scales = "fixed") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_2_06)
ggsave("plot-2-06.png", plot = plot_2_06, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 450000, by = 50000)
y_labels <-c ("0", "50 000", "100 000", "150 000", "200 000", "250 000", "300 000", "350 000", "400 000", "450 000")
#Ride count by month and customer type
plot_2_07 <- ggplot(bike_ride_count_month, aes(x = month, y = ride_count_month, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Month", y = "Ride count", title = "Ride count by month and customer type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_2_07)
ggsave("plot-2-07.png", plot = plot_2_07, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 450000, by = 50000)
y_labels <-c ("0", "50 000", "100 000", "150 000", "200 000", "250 000", "300 000", "350 000", "400 000", "450 000")
ordered_ride_count_month_member$month <- factor(ordered_ride_count_month_member$month, levels = ordered_ride_count_month_member$month[order(-ordered_ride_count_month_member$ride_count_month)])
ordered_ride_count_month_casual$month <- factor(ordered_ride_count_month_casual$month, levels = ordered_ride_count_month_casual$month[order(-ordered_ride_count_month_casual$ride_count_month)])
#Top Month by ride count for casual riders
plot_2_08 <- ggplot(ordered_ride_count_month_member, aes(x = month, y = ride_count_month)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
scale_y_continuous(limits = c(0, 450000), breaks = y_breaks, labels = y_labels, expand = c(0, 0)) +
labs(x = "Month", y = "Ride count", title = "Ride count by month for member riders") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_2_08)
ggsave("plot-2-08.png", plot = plot_2_08, width = 10, height = 6)
#Top Month by ride count for casual riders
plot_2_09 <- ggplot(ordered_ride_count_month_casual, aes(x = month, y = ride_count_month)) +
geom_bar(stat = "identity", fill = "#F8766D") +
scale_y_continuous(limits = c(0, 450000), breaks = y_breaks, labels = y_labels, expand = c(0, 0)) +
labs(x = "Month", y = "Ride count", title = "Ride count by month for casual riders") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_2_09)
ggsave("plot-2-09.png", plot = plot_2_09, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 600000, by = 100000)
y_labels <-c ("0", "100 000", "200 000", "300 000", "400 000", "500 000", "600 000")
#Ride Count by weekday and customer type
plot_2_10<- ggplot(bike_ride_count_week, aes(x = day_of_week, y = ride_count_week, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Week day", y = "Ride count", title = "Ride count by weekday and customer type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_2_10)
ggsave("plot-2-10.png", plot = plot_2_10, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 325000, by = 25000)
y_labels <- c("0", "25 000", "50 000", "75 000", "100 000", "125 000", "150 000", "175 000", "200 000", "225 000", "250 000", "275 000", "300 000", "325 000")
#Hourly ride counts by customer type on workdays
plot_2_11 <- ggplot() +
geom_line(aes(x = start_hour, y = ride_count, colour = "Casual"), size = 0.8, data = rides_by_hour_workdays_casual) +
geom_line(aes(x = start_hour, y = ride_count, colour = "Member"), size = 0.8, data = rides_by_hour_workdays_member) +
scale_x_continuous(breaks = 0:23) +
scale_y_continuous(limits = c(0, 325000), breaks = y_breaks, labels = y_labels) +
labs(title = "Hourly ride counts by customer type on workdays", x = "Hours", y = "Ride count",) +
scale_color_manual(values = c("#F8766D", "#00BFC4"), labels = c("Casual", "Member"), name = "Customer type") +
theme_minimal()
print(plot_2_11)
ggsave("plot-2-11.png", plot = plot_2_11, width = 10, height = 6)
#Hourly ride counts by customer type on workdays
plot_2_12 <- ggplot() +
geom_line(aes(x = start_hour, y = ride_count, colour = "Casual"), size = 0.8, data = rides_by_hour_weekends_casual) +
geom_line(aes(x = start_hour, y = ride_count, colour = "Member"), size = 0.8, data = rides_by_hour_weekends_member) +
scale_x_continuous(breaks = 0:23) +
scale_y_continuous(limits = c(0, 325000), breaks = y_breaks, labels = y_labels) +
labs(title = "Hourly ride counts by customer type on weekends", x = "Hours", y = "Ride count",) +
scale_color_manual(values = c("#F8766D", "#00BFC4"), labels = c("Casual", "Member"), name = "Customer type") +
theme_minimal()
print(plot_2_12)
ggsave("plot-2-12.png", plot = plot_2_12, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 3500000, by = 500000)
y_labels <-c ("0", "500 000", "1 000 000", "1 500 000", "2 000 000", "2 500 000", "3 000 000", "3 500 000")
#Bar chart: Ride count by customer type
plot_2_13 <- ggplot(bike_ride_count_member_type, aes(x = member_casual, y = ride_count_member_type, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Customer type", y = "Ride count", title = "Ride count by customer type") +
theme_minimal()
print(plot_2_13)
ggsave("plot-2-13.png", plot = plot_2_13, width = 10, height = 6)
#Palette
color_palette <- c("#F8766D", "#00BFC4")
#Pie chart: Ride count by customer type
plot_2_14 <- ggplot(bike_ride_count_member_type, aes(x = "", y = percentages_ride_count_member_type, fill = member_casual)) +
geom_col() +
geom_text(aes(label = labels_ride_count_member_type_perc),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
scale_fill_manual(values = color_palette) +
theme_minimal() +
labs(x = NULL, y = "Ride Count",
fill = "Customer type", title = "Ride count by customer type")
print(plot_2_14)
ggsave("plot-2-14.png", plot = plot_2_14, width = 10, height = 6)
#Filtering August
august_member_casual <- bike_data_2023 %>%
filter(month == "August") %>%
mutate(date = as.Date(started_at))
#print(august_member_casual)
#August ride count for casual riders
#Checking which monday had least ride counts for casuals in August
august_casual_grouped <- august_member_casual %>%
filter(member_casual == "casual") %>%
group_by(date) %>%
summarise(ride_count = n())
#print(august_casual_grouped)
#August ride count for member riders
august_member_grouped <- august_member_casual %>%
filter(member_casual == "member") %>%
group_by(date) %>%
summarise(ride_count = n())
#print(august_member_grouped)
#Variables
y_breaks <- seq(0, 20000, by = 2500)
y_labels <-c ("0", "2 500", "5 000", "7 500", "10 000", "12 500", "15 000", "17 500", "20 000")
#August ride count by casual riders
plot_3_15 = ggplot(august_casual_grouped, aes(x = date, y = ride_count)) +
geom_bar(stat = "identity", fill = "#F8766D") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Date", y = "Ride count", title = "August ride count by casual riders") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_3_15)
ggsave("plot-3-15.png", plot = plot_3_15, width = 10, height = 6)
#August ride count by member riders
plot_3_16 = ggplot(august_member_grouped, aes(x = date, y = ride_count)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
scale_y_continuous(breaks = y_breaks, labels = y_labels) +
labs(x = "Date", y = "Ride count", title = "August ride count by member riders") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_3_16)
ggsave("plot-3-16.png", plot = plot_3_16, width = 10, height = 6)
color_palette <- c("#BF5656","#F8766D", "#8C433E", "#009A9E", "#00BFC4")
plot_4_17 <- ggplot(rideable_summary, aes(x = "", y = percentages_rideable_type, fill = lab_name)) +
geom_col() +
geom_text(aes(label = labels_rideable_type_perc),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
scale_fill_manual(values = color_palette) +
theme_minimal() +
labs(x = NULL, y = "Readable type distribution",
fill = "Customer type", title = "Distribution of rideable types among member & casual riders")
print(plot_4_17)
ggsave("plot-4-17.png", plot = plot_4_17, width = 10, height = 6)
#Variables
y_breaks <- seq(0, 65000, by = 5000)
y_labels <-c ("0", "5 000", "10 000", "15 000", "20 000", "25 000", "30 000", "35 000", "40 000", "45 000", "50 000", "55 000", "60 000", "65 000")
#Variables
y_breaks <- seq(0, 70000, by = 10000)
y_labels <-c ("0", "10 000", "20 000", "30 000", "40 000", "50 000", "60 000", "70 000")
#Ordering Stations
ordered_station_top <- transform(station_top, start_station_name = factor(start_station_name, levels = station_top$start_station_name[order(station_top$ride_count, decreasing = TRUE)]))
ordered_station_top$start_station_name <- fct_reorder(station_top$start_station_name, station_top$ride_count, .desc = FALSE)
##Top 15 popular stations
plot_5_18 <- ggplot(ordered_station_top, aes(x = ride_count, y = start_station_name)) +
geom_bar(stat = "identity", fill = "#8C433E", width = 0.5) +
scale_x_continuous(breaks = y_breaks, labels = y_labels) +
labs(y = "Station name", x = "Ride count", title = "Top 15 most popular stations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot_5_18)
ggsave("plot-5-18.png", plot = plot_5_18, width = 10, height = 6)
write.csv(bike_data_2023, "bike_data_2023.csv", row.names = FALSE)
